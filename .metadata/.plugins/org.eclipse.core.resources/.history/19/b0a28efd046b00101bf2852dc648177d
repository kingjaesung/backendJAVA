package com.subject;

import static com.common.DBUtil.getConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * SubjectDAO 클래스 (Data Access Object)
 * 
 * 이 클래스는 데이터베이스의 subject 테이블에 접근하여 학과 정보를 처리하는 모든 기능을 담당한다.
 * 
 * 주된 기능은 다음과 같다: CRUD 프로그램 - Create (입력): 새로운 학과 정보 추가 - Read (조회): 학과 목록 조회 및
 * 검색 - Update (수정): 학과 정보 변경 - Delete (삭제): 학과 정보 삭제
 * 
 * 이 DAO 클래스는 실제 데이터 처리의 최종 단계로서, 비즈니스 로직과 데이터베이스 간의 연결을 책임진다.
 */

public class SubjectDAO {

	private static SubjectDAO instance = null;

	public static SubjectDAO getInstance() {
		if (instance == null) {
			instance = new SubjectDAO();
		}
		return instance;
	}

	private SubjectDAO() {
	}

	private SubjectVO addSubject(ResultSet rs) throws SQLException {
		SubjectVO subjectVO = new SubjectVO();
		subjectVO.setNo(rs.getInt("no"));
		subjectVO.setSubjectName(rs.getString("s_name"));
		subjectVO.setSubjectNumber(rs.getString("s_num"));
		return subjectVO;
	}

	public List<SubjectVO> getAllsubjects() {
		List<SubjectVO> list = new ArrayList<>();
		String sql = "SELECT no, s_num, s_name FROM subject ORDER BY no";

		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql);
				ResultSet rs = pstmt.executeQuery()) {

			while (rs.next()) {
				list.add(addSubject(rs));
			}

		} catch (SQLException e) {
			System.out.println("getAllsubjects 오류" + e.getMessage());
		}
		return list;
	}

	public String getSubjectNumber() {
		String subjectNumber = "";
		StringBuilder sql = new StringBuilder();
		// NVL > 널값을 다른 값으로 바꿔주는 함수
		sql.append("SELECT NVL(TO_CHAR(MAX(s_num)+1, 'FM00'),'01') ");
		sql.append("AS subjectNum FROM subject");

		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql.toString());
				ResultSet rs = pstmt.executeQuery();) {

			if (rs.next()) {
				subjectNumber = rs.getString("subjectNum");
			}

		} catch (Exception e) {
			System.err.println("[getSubjectNumber] SQL 오류:" + e.getMessage());
		}
		return subjectNumber;
	}

	// SubjectDAO 클래스에 입력을 처리하기 위한 메서드 추가

	public boolean subjectInsert(SubjectVO subjectVO) {

		StringBuilder sql = new StringBuilder();
		sql.append("INSERT INTO subject(no, s_num, s_name) ");
		sql.append("VALUES(subject_seq.nextval,? , ?)");

		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql.toString());) {

			pstmt.setString(1, subjectVO.getSubjectNumber()); // 첫번쨰 ? (바인딩변수) 설정 값
			pstmt.setString(2, subjectVO.getSubjectName()); // 두번쨰 ? (바인딩변수) 설정 값

			return pstmt.executeUpdate() == 1;

		} catch (Exception e) {
			System.err.println("subjectInset SQL 오류:" + e.getMessage());
			return false;
		}

	}

	// SubjectDAO 클래스에 수정을 처리하기 위한 메서드 추가

	public boolean subjectUpdate(SubjectVO subjectVO) {

		StringBuilder sql = new StringBuilder();
		sql.append("UPDATE subject SET s_name = ?");
		sql.append("WHERE s_num = ?");

		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql.toString());) {
				
			pstmt.setString(1, subjectVO.getSubjectName());
			pstmt.setString(2,  subjectVO.getSubjectNumber());
			
			return pstmt.executeUpdate() == 1;
		} catch (Exception e) {
			System.err.println("subjectUpdate SQL 오류: " + e.getMessage());
			return false;
		}

	}

}
